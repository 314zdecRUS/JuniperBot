/*
 * This file is part of JuniperBotJ.
 *
 * JuniperBotJ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * JuniperBotJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with JuniperBotJ. If not, see <http://www.gnu.org/licenses/>.
 */
description = 'JuniperBot Discord Bot Core Library'

dependencies {

    // SPRING CORE DEPENDENCIES
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion)
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion)
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion)
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-quartz', version: springBootVersion)
    compile(group: 'org.springframework.cloud', name: 'spring-cloud-starter-consul-discovery', version: springBootVersion)
    compile(group: 'org.springframework', name: 'spring-web')
    compile(group: 'org.springframework', name: 'spring-context-support')

    // COMMON CORE DEPENDENCIES
    compile(group: 'org.apache.commons', name: 'commons-lang3')
    compile(group: 'commons-io', name: 'commons-io', version: commonsIoVersion)
    compile(group: 'commons-validator', name: 'commons-validator', version: commonsValidatorVersion)
    compile(group: 'commons-codec', name: 'commons-codec', version: commonsCodecVersion)
    compile(group: 'org.apache.commons', name: 'commons-collections4', version: commonsCollections4Version)
    compile(group: 'joda-time', name: 'joda-time')
    compile(group: 'com.google.code.gson', name: 'gson', version: gsonVersion)
    compile(group: 'com.google.guava', name: 'guava', version: guavaVersion)
    compile(group: 'org.json', name: 'json', version: jsonVersion)
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-core')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-databind')
    compile(group: 'org.ocpsoft.prettytime', name: 'prettytime', version: prettytimeVersion)
    compile(group: 'org.codehaus.groovy', name: 'groovy')
    compile(group: 'com.github.jasminb', name: 'jsonapi-converter', version: jsonApiConverter)

    // INTEGRATION DEPENDENCIES
    compile(group: 'net.dv8tion', name: 'JDA', version: jdaVersion) {
        exclude group: 'club.minnced', module: 'opus-java'
    }
    // we need to include it manually because in JDA it scoped as POM and included in fat libraries by bootJar task
    compile(group: 'club.minnced', name: 'opus-java', version: opusJavaVersion)

    // METRICS DEPENDENCIES
    compile(group: 'io.sentry', name: 'sentry-logback', version: sentryVersion)
    compile(group: 'com.ryantenney.metrics', name: 'metrics-spring', version: metricsSpringVersion)
    compile(group: 'io.dropwizard.metrics', name: 'metrics-jmx')
    compile(group: 'io.dropwizard.metrics', name: 'metrics-jvm')
    compile(group: 'io.prometheus', name: 'simpleclient', version: prometheusVersion)
    compile(group: 'io.prometheus', name: 'simpleclient_common', version: prometheusVersion)
    compile(group: 'io.prometheus', name: 'simpleclient_dropwizard', version: prometheusVersion)

    // DATABASE DEPENDENCIES
    compile(group: 'javax.annotation', name: 'javax.annotation-api')
    compile(group: 'org.hibernate.validator', name: 'hibernate-validator')
    compile(group: 'org.postgresql', name: 'postgresql', version: postgresqlVersion)
    compile(group: 'org.liquibase', name: 'liquibase-core')

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
    testCompile(group: 'org.springframework.security', name: 'spring-security-test')
}

dependencyManagement {
    imports { mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}") }
}
