page.apidocs.toc.title = Documentation
#
page.apidocs.introduction = Introduction
page.apidocs.ratingGroup = Member ranking
page.apidocs.memberList = Member list
#
#Common API string
page.apidocs.details.parameters = Parameters
page.apidocs.details.parameters.required = Required
page.apidocs.details.successResponse = Success response
#
page.apidocs.details.exampleRqRs = Request and response example
page.apidocs.details.thisRequest = This request
page.apidocs.details.request = Request
page.apidocs.details.response = Response
#
page.apidosc.responseTable.header.field = Field
page.apidosc.responseTable.header.type = Type
page.apidosc.responseTable.header.description = Description
#
#Introduction content
page.apidocs.introduction.content = \
<p>This document is intended to developers and contains application programming interface documentation of JuniperBot (API).</p> \
<p>API provides the ability to automatically obtain data from JuniperBot. \
Using the API, external applications can obtain information about server members, their rank, level, and so on.</p> \
<p>Access to the public JuniperBot API is available at <a href="#">https://juniperbot.ru/api/</a> and implemented as REST-interface. \
It is formed from a set of REST-interfaces of individual resources and their actions. \
Thus, requests must be sent to addresses of the form <a href="#">https://juniperbot.ru/api/resource/action</a> where:</p> \
<ul> \
<li><code>resource</code> - the resource name;</li> \
<li><code>action</code> - the name of the action on this resource.</li> \
</ul> \
<p>The documentation will then only describe the relative paths to resources and actions <code>/resource/action[/optionalPath][?param=value]</code>. All action responses will be in JSON format.</p>
#
#Member List Content
page.apidocs.memberList.description = Allows you to obtain information about the members of the server, their identifiers, ranks, levels and so on.
#
page.apidocs.memberList.param.guildId = server identifier (snowflake)
page.apidocs.memberList.successResponse.description = Successful response to a request (<code>HTTP 200</code>) will return a JSON array of objects of the following structure:
#
page.apidocs.memberList.response.field.id = user identifier inside Discord
page.apidocs.memberList.response.field.name = user name inside Discord
page.apidocs.memberList.response.field.discriminator = 4-digit discriminator of user Discord
page.apidocs.memberList.response.field.nick = Member name on the server
page.apidocs.memberList.response.field.avatarUrl = URL to user's avatar
page.apidocs.memberList.response.field.level = Member's level on the server
page.apidocs.memberList.response.field.remainingExp = Member's EXP <span class="text-bold">on their current level</span>
page.apidocs.memberList.response.field.levelExp = EXP required to reach the next level
page.apidocs.memberList.response.field.totalExp = Total members's EXP
page.apidocs.memberList.response.field.rank = Rank of the member on the server
page.apidocs.memberList.response.field.pct = Percentage of member's progress at the current level
page.apidocs.memberList.response.field.cookies = The number of cookies member got üç™