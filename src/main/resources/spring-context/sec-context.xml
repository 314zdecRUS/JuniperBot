<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2
        http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg value="/login"/>
    </bean>

    <!-- make ALL other requests go thru the Oauth security filters -->
    <security:http pattern="/**"
                   create-session="always"
                   entry-point-ref="oauthAuthenticationEntryPoint"
                   disable-url-rewriting="true"
                   use-expressions="true"
                   xmlns="http://www.springframework.org/schema/security">
        <security:intercept-url pattern="/resources/**" access="permitAll" />
        <security:intercept-url pattern="/" access="permitAll" />
        <security:intercept-url pattern="/favicon.ico" access="permitAll" />
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
        <security:custom-filter ref="oauth2RedirectForAccessTokenFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
        <security:custom-filter ref="oauth2AuthenticationFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
        <security:custom-filter ref="anonymousAuthFilter" before="ANONYMOUS_FILTER"/>
        <security:access-denied-handler error-page="/denied"/>
        <security:logout logout-url="/logout" logout-success-url="/"/>
        <security:csrf disabled="true"/>
    </security:http>

    <bean id="anonymousAuthFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
        <constructor-arg value="anon" />
    </bean>

    <bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
        <constructor-arg value="anon" />
    </bean>

    <oauth2:resource id="oauthResource"
                     client-id="${discord.oauth.clientId}"
                     client-secret="${discord.oauth.clientSecret}"
                     user-authorization-uri="${discord.oauth.authorize}"
                     access-token-uri="${discord.oauth.token}"
                     type="authorization_code"
                     client-authentication-scheme="query"
                     scope="${discord.oauth.scope}" />

    <bean id="requestFactory" class="ru.caramel.juniperbot.security.auth.DiscordHttpRequestFactory" />
    <bean id="tokenProvider" class="org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider">
        <property name="requestFactory" ref="requestFactory" />
    </bean>

    <bean id="discordTokenServices" class="ru.caramel.juniperbot.security.auth.DiscordTokenServices">
        <constructor-arg value="${discord.oauth.userInfoUri}"/>
        <constructor-arg value="${discord.oauth.guildsInfoUri}"/>
        <constructor-arg value="${discord.oauth.clientId}"/>
        <constructor-arg ref="oauthResource"/>
        <property name="requestFactory" ref="requestFactory" />
    </bean>

    <oauth2:rest-template id="restTemplate" resource="oauthResource" access-token-provider="tokenProvider" />

    <oauth2:client id="oauth2RedirectForAccessTokenFilter"/>
    <bean id="oauth2AuthenticationFilter"
          class="org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilter">
        <constructor-arg name="defaultFilterProcessesUrl" value="/login"/>
        <property name="restTemplate" ref="restTemplate" />
        <property name="tokenServices" ref="discordTokenServices" />
        <property name="authenticationSuccessHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
                <property name="defaultTargetUrl" value="/servers" />
            </bean>
        </property>
    </bean>

    <security:authentication-manager id="authenticationManager" />
</beans>